// ...existing code...
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function membershipId(cid, uid) {
      return cid + '_' + uid;
    }

    function isCommunityMember(cid) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/memberships/$(membershipId(cid, request.auth.uid)));
    }

    function threadExists(cid, threadId) {
      return exists(/databases/$(database)/documents/community_chats/$(cid)/threads/$(threadId));
    }

    function threadData(cid, threadId) {
      return get(/databases/$(database)/documents/community_chats/$(cid)/threads/$(threadId)).data;
    }

    function isThreadParticipant(cid, threadId) {
      return isSignedIn() && threadExists(cid, threadId) &&
        threadData(cid, threadId).participants.hasAny([request.auth.uid]);
    }

    function threadParticipantUpdateAllowed(cid, threadId) {
      let existing = threadExists(cid, threadId) ? threadData(cid, threadId).participants : [];
      let incoming = request.resource.data.participants;
      let existingList = existing == null ? [] : existing;
      let incomingList = incoming == null ? existingList : incoming;
      return incomingList == existingList || (
        incomingList.size() <= 2 &&
        incomingList.size() >= existingList.size() &&
        incomingList.hasAll(existingList) &&
        incomingList.hasAny([request.auth.uid])
      );
    }

    // contacts（既存の公開フォーム）
    match /contacts/{doc} {
      allow create: if
          isSignedIn()
          || (
            request.resource.data.keys().hasOnly([
              'uid', 'name', 'email', 'body', 'hp', 'createdAt', 'status'
            ]) &&
            request.resource.data.hp == '' &&
            request.resource.data.email is string &&
            request.resource.data.email.size() > 3 &&
            request.resource.data.email.size() <= 320 &&
            request.resource.data.body is string &&
            request.resource.data.body.size() > 1 &&
            request.resource.data.body.size() <= 2000
          );
      allow read, update, delete: if false;
    }

    // users
    match /users/{uid} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == uid;
    }

    // communities（開発用に読み書き許可）
    match /communities/{cid} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();

      match /posts/{postId} {
        allow read, write: if isSignedIn();
      }
    }

    // memberships
    match /memberships/{docId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    // tasks（開発用: サインインなら読み書き可）
    match /tasks/{cid}/tasks/{taskId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    // ledger entries／idempotency
    match /ledger/{cid} {
      function isCommunityMemberOrCentralBank() {
        return request.auth != null &&
          (request.auth.uid == '__central_bank__' ||
            exists(/databases/$(database)/documents/memberships/$(membershipId(cid, request.auth.uid))));
      }

      match /entries/{entryId} {
        allow read: if isCommunityMemberOrCentralBank();
        allow write: if isCommunityMemberOrCentralBank();
      }

      match /idempotency/{docId} {
        allow read: if isCommunityMemberOrCentralBank();
        allow create: if isCommunityMemberOrCentralBank();
        allow update: if false;
        allow delete: if false;
      }
    }

    match /requests/{cid}/items/{reqId} {
      allow read, write: if isSignedIn();
    }

    match /news/{cid}/posts/{postId} {
      allow read, write: if isSignedIn();
    }

    match /join_requests/{cid}/items/{uid} {
      allow read, write: if isSignedIn();
    }

    // 開発用: community_chats をサインイン済みユーザーに対して緩く許可します。
    // 本番では必ず元の厳格なルール（isCommunityMember / isThreadParticipant 等）に戻してください。
    match /community_chats/{cid} {
      // サインインしていればコミュニティチャット全体の読み書きを許可（開発用）
      allow read, write: if isSignedIn();

      match /threads/{threadId} {
        allow read, create, update, delete: if isSignedIn();

        match /messages/{messageId} {
          allow read, create, update, delete: if isSignedIn();
        }
      }
    }

    // デフォルト拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
// ...existing code...